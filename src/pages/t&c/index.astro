---
import Layout from "../../layouts/Layout.astro";
import ChipAnchor from "../../components/ChipAnchor.astro";
import ConceptCard from "../../components/ConceptCard.astro";
import Search from "../../components/Search.astro";
const SITE_TITLE = "GS-Tips&Conceptos";
const SITE_DESCRIPTION =
  "Tips y concejos que te ayudaran a mejorar tu entendimiento de Javascript y sus temas relacionados";
---

<Layout title={SITE_TITLE} description={SITE_DESCRIPTION}>
  <div class="area">
    <ul class="circles">
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
      <li></li>
    </ul>
  </div>
  <header class="flex center f-col">
    <h1 class="txt-center display-2 txt-white">Tips & Conceptos</h1>
    <ChipAnchor href="/" target="_self" color="white br-primary">
      Ir al Inicio
    </ChipAnchor>
  </header>
  <Search />
  <main class="grid col-3 md-col-2 sm-col-2 txt-white" id="posts">
    <ConceptCard>
      <h2>Scope/Alcance</h2>
      <p>
        El alcance es el área de un programa en el que una variable o función es
        visible/usable. En otras palabras, es el lugar donde se puede acceder a
        una variable o función.
      </p>
      <p>
        En JavaScript las variables <span class="txt-blue">const y let</span> tiene
        un alcance por bloque a diferencia de <span class="txt-red">var</span>.
        Es por ello que no se recomienda su uso.
      </p>
    </ConceptCard>
    <ConceptCard>
      <h2>Hoisting/Elevación</h2>
      <p>
        La elevación es un comportamiento especial de JavaScript que hace que
        las variables declaradas en la parte superior de un bloque de código
        sean visibles desde el principio del bloque.
      </p>
      <p>
        En otras palabras hace que una variable o función tengan un scope global
        en el archivo.
      </p>
    </ConceptCard>
    <ConceptCard>
      <h2>Parámetros</h2>
      <p>
        Un parámetro es una variable que se pasa a una función como entrada.
      </p>
      <pre><code>function miFuncion(<span class="txt-green">parametro</span>) &lbrace;
  console.log(parametro);
&rbrace; </code></pre>
    </ConceptCard>
    <ConceptCard>
      <h2>Argumento</h2>
      <p>
        Un argumento es el valor que se pasa a una función cuando se invoca.
      </p>
      <pre><code>miFuncion(<span class="txt-green">"Juan"</span>);</code> // Juan es el argumentó</pre>
    </ConceptCard>
  </main>
</Layout>

<style>
  body {
    scroll-behavior: smooth;
    background: var(--accent);
  }
  h2 {
    margin: 0;
    text-wrap: balance;
  }
  p {
    margin: 0;
    margin-top: 5px;
    text-wrap: pretty;
  }

  main {
    margin: 4em 0;
  }
  header {
    margin: 3em auto;
  }
  code {
    color: rgb(171, 206, 226);
  }

  .circles {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .circles li {
    position: absolute;
    display: block;
    list-style: none;
    width: 20px;
    height: 20px;
    background: rgba(231, 221, 71, 0.87);
    animation: animate 25s linear infinite;
    bottom: -150px;
    z-index: -1;
  }

  .circles li:nth-child(1) {
    left: 25%;
    width: 80px;
    height: 80px;
    animation-delay: 0s;
  }

  .circles li:nth-child(2) {
    left: 10%;
    width: 20px;
    height: 20px;
    animation-delay: 2s;
    animation-duration: 12s;
  }

  .circles li:nth-child(3) {
    left: 70%;
    width: 20px;
    height: 20px;
    animation-delay: 4s;
  }

  .circles li:nth-child(4) {
    left: 40%;
    width: 60px;
    height: 60px;
    animation-delay: 0s;
    animation-duration: 18s;
  }

  .circles li:nth-child(5) {
    left: 65%;
    width: 20px;
    height: 20px;
    animation-delay: 0s;
  }

  .circles li:nth-child(6) {
    left: 75%;
    width: 110px;
    height: 110px;
    animation-delay: 3s;
  }

  .circles li:nth-child(7) {
    left: 35%;
    width: 150px;
    height: 150px;
    animation-delay: 7s;
  }

  .circles li:nth-child(8) {
    left: 50%;
    width: 25px;
    height: 25px;
    animation-delay: 15s;
    animation-duration: 45s;
  }

  .circles li:nth-child(9) {
    left: 20%;
    width: 15px;
    height: 15px;
    animation-delay: 2s;
    animation-duration: 35s;
  }

  .circles li:nth-child(10) {
    left: 85%;
    width: 150px;
    height: 150px;
    animation-delay: 0s;
    animation-duration: 11s;
  }

  @keyframes animate {
    0% {
      transform: translateY(0) rotate(0deg);
      opacity: 1;
      border-radius: 0;
    }

    100% {
      transform: translateY(-1000px) rotate(720deg);
      opacity: 0;
      border-radius: 50%;
    }
  }
</style>
