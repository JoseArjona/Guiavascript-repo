---
import BasicLayout from "../../layouts/BasicLayout.astro";
import ProgressBar from "../../components/ProgressBar.astro";
import KnoledgeForm from "../../components/survey/KnoledgeForm.astro";
import QuestionVue from "../../components/survey/Question.vue";

const questions = [
  {
    id: "1",
    statement:
      "¿Cuál es la diferencia entre una función declarada con `function()` y una arrow function?",
    answers: [
      {
        id: "1",
        answer:
          "Las funciones declaradas con `function()` pueden tener una expresión de retorno, mientras que las flechas no",
        value: "incorrect",
        note: "Tanto las funciones declaradas con `function()` como las flechas pueden tener una expresión de retorno",
      },
      {
        id: "2",
        answer:
          "Las funciones de flecha son funciones anónimas por lo tanto no sufren de Hoisting.",
        value: "correct",
        note: "Bien hecho. Las funciones normales tienen un scope global, a diferencia de las arrow function; el cual es local.",
      },
    ],
  },
  {
    id: "2",
    statement: "Secciona el código cuando nos referimos a argumento",
    answers: [
      {
        id: "1",
        answer: "miFuncion(parametro1, parametro2)",
        value: "correct",
        note: "Muy bien, cuando invocamos una función y le pasamos valores nos referimos como argumentos.",
      },
      {
        id: "2",
        answer: "function suma(num1, num2) { ... }",
        value: "incorrect",
        note: "Cuando creamos una función y definimos valores a tratar (que nos van a enviar) le llamamos parámetros.",
      },
      {
        id: "3",
        answer: "let arg = 'Yo soy el argumento'",
        value: "incorrect",
        note: "Tentador pero incorrecto, esto es una declaración de variable.",
      },
    ],
  },
];
---

<BasicLayout
  title={"Guiavascript - Funciones"}
  description={"Las funciones son un conjunto de instrucciones que se pueden ejecutar varias veces, para no tener que escribir el mismo código."}
>
  <ProgressBar progress="70" />
  <section class="container">
    <h2>Funciones</h2>
    <div class="card primary container-lg">
      <span class="txt-yellow">Nota</span>
      <p>
        Las funciones son un conjunto de instrucciones que se pueden ejecutar
        varias veces, para no tener que escribir el mismo código otra vez.
        Además, a las funciones se le pueden pasar <a
          href="../t&c/#param"
          class="txt-blue">parámetros</a
        >, lo que permite tener un mismo código con diferentes resultados según
        el parámetro.
      </p>
    </div>
    <div class="card primary container-lg">
      <h3><span class="txt-blue">function()</span></h3>
      <p>
        Para crear una función se utiliza la palabra reservada function, seguida
        del nombre de la función, los parámetros que recibe van dentro de los
        paréntesis y el código que ejecuta la función va dentro de las llaves.
        Una función debe ser llamada para que se ejecute, para llamarla solo se
        escribe el nombre de la función y los <a
          class="txt-blue"
          href="../t&c/"
          target="_blank">argumentos</a
        > que recibe.
      </p>
      <pre><code class="language-js">function suma(a,b)&lbrace; //a y b son parámetros
let resultado = a + b //aquí se ejecuta el código de la función
console.log(resultado); //aquí se imprime el resultado
&rbrace;
suma(2,2); //llamamos la función - imprime 4
suma(3,3); // podemos llamar la función con diferentes parámetros - imprime 6</code></pre>
      <p>
        Podemos agregarle un <span class="txt-orange">return</span> para retornar
        el valor. De esta forma la función no imprime el resultado, solo lo retorna
        y lo que hace más fácil manipular los datos.
      </p>
      <pre><code class="language-js">function suma(a,b)&lbrace;
let resultado = a+b;
return 
&rbrace;
console.log(suma(2,2)); //imprime 4
</code></pre>
    </div>
    <div class="card primary container-lg">
      <h3><span class="txt-blue">Arrow function</span></h3>
      <p>
        Las arrow function son una forma más corta de escribir funciones. Además
        que estas funciones nombradas "anónimas" no sufren de <a
          href="../t&c/#hoisting"
          target="_blank"
          class="txt-blue">Hoisting</a
        > como las funciones normales. Se escriben de la siguiente manera:
      </p>
      <pre><code class="language-js">//si la función solo tiene una linea de código se puede escribir asi
const suma = (a,b) => a+b; 
console.log(suma(2,2)); //imprime 4
 
//si la función tiene más de una linea de código se debe escribir así
const suma = (a,b) => &lbrace;
 let resultado = a+b;
 return resultado;
&rbrace;
console.log(suma(2,2)); //imprime 4
</code></pre>
    </div>
  </section>
  <KnoledgeForm>
    <!-- {questions.map((question) => <Question question={question} />)} -->
    {
      questions.map((question) => (
        <QuestionVue question={question} client:idle />
      ))
    }
  </KnoledgeForm>
</BasicLayout>
